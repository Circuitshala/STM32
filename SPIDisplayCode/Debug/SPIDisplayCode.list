
SPIDisplayCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002364  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e10  08002424  08002424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003234  08003234  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003234  08003234  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003234  08003234  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003234  08003234  00013234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003238  08003238  00013238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800323c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000014  08003250  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08003250  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a16  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158d  00000000  00000000  00026a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00027fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  000286c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113be  00000000  00000000  00028ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089aa  00000000  00000000  0003a09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006606b  00000000  00000000  00042a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a8ab3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001764  00000000  00000000  000a8b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800240c 	.word	0x0800240c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	0800240c 	.word	0x0800240c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af02      	add	r7, sp, #8
 8000226:	0005      	movs	r5, r0
 8000228:	000c      	movs	r4, r1
 800022a:	0010      	movs	r0, r2
 800022c:	0019      	movs	r1, r3
 800022e:	1dbb      	adds	r3, r7, #6
 8000230:	1c2a      	adds	r2, r5, #0
 8000232:	801a      	strh	r2, [r3, #0]
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	1c22      	adds	r2, r4, #0
 8000238:	801a      	strh	r2, [r3, #0]
 800023a:	1cbb      	adds	r3, r7, #2
 800023c:	1c02      	adds	r2, r0, #0
 800023e:	801a      	strh	r2, [r3, #0]
 8000240:	003b      	movs	r3, r7
 8000242:	1c0a      	adds	r2, r1, #0
 8000244:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000246:	1dbb      	adds	r3, r7, #6
 8000248:	8818      	ldrh	r0, [r3, #0]
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	8819      	ldrh	r1, [r3, #0]
 800024e:	1cbb      	adds	r3, r7, #2
 8000250:	881a      	ldrh	r2, [r3, #0]
 8000252:	003b      	movs	r3, r7
 8000254:	881c      	ldrh	r4, [r3, #0]
 8000256:	2318      	movs	r3, #24
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	0023      	movs	r3, r4
 8000260:	f000 fb30 	bl	80008c4 <ST7735_FillRectangle>
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b002      	add	sp, #8
 800026a:	bdb0      	pop	{r4, r5, r7, pc}

0800026c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af02      	add	r7, sp, #8
 8000272:	0002      	movs	r2, r0
 8000274:	1dbb      	adds	r3, r7, #6
 8000276:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <fillScreen+0x30>)
 800027a:	2200      	movs	r2, #0
 800027c:	5e9a      	ldrsh	r2, [r3, r2]
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <fillScreen+0x34>)
 8000280:	2100      	movs	r1, #0
 8000282:	5e59      	ldrsh	r1, [r3, r1]
 8000284:	1dbb      	adds	r3, r7, #6
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	000b      	movs	r3, r1
 800028c:	2100      	movs	r1, #0
 800028e:	2000      	movs	r0, #0
 8000290:	f7ff ffc6 	bl	8000220 <fillRect>
}
 8000294:	46c0      	nop			; (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	b002      	add	sp, #8
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000030 	.word	0x20000030
 80002a0:	20000032 	.word	0x20000032

080002a4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <ST7735_Select+0x18>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	0018      	movs	r0, r3
 80002b0:	f001 f896 	bl	80013e0 <HAL_GPIO_WritePin>
}
 80002b4:	46c0      	nop			; (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	48000400 	.word	0x48000400

080002c0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <ST7735_Unselect+0x18>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	2140      	movs	r1, #64	; 0x40
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 f888 	bl	80013e0 <HAL_GPIO_WritePin>
}
 80002d0:	46c0      	nop			; (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	48000400 	.word	0x48000400

080002dc <ST7735_Reset>:

void ST7735_Reset()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <ST7735_Reset+0x28>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	0018      	movs	r0, r3
 80002e8:	f001 f87a 	bl	80013e0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80002ec:	2005      	movs	r0, #5
 80002ee:	f000 fe2f 	bl	8000f50 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80002f2:	4b04      	ldr	r3, [pc, #16]	; (8000304 <ST7735_Reset+0x28>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	2180      	movs	r1, #128	; 0x80
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 f871 	bl	80013e0 <HAL_GPIO_WritePin>
}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	48000800 	.word	0x48000800

08000308 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	0002      	movs	r2, r0
 8000310:	1dfb      	adds	r3, r7, #7
 8000312:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	0099      	lsls	r1, r3, #2
 8000318:	2390      	movs	r3, #144	; 0x90
 800031a:	05db      	lsls	r3, r3, #23
 800031c:	2200      	movs	r2, #0
 800031e:	0018      	movs	r0, r3
 8000320:	f001 f85e 	bl	80013e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000324:	2301      	movs	r3, #1
 8000326:	425b      	negs	r3, r3
 8000328:	1df9      	adds	r1, r7, #7
 800032a:	4804      	ldr	r0, [pc, #16]	; (800033c <ST7735_WriteCommand+0x34>)
 800032c:	2201      	movs	r2, #1
 800032e:	f001 fd6b 	bl	8001e08 <HAL_SPI_Transmit>
}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	b002      	add	sp, #8
 8000338:	bd80      	pop	{r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	2000003c 	.word	0x2000003c

08000340 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800034a:	2380      	movs	r3, #128	; 0x80
 800034c:	0099      	lsls	r1, r3, #2
 800034e:	2390      	movs	r3, #144	; 0x90
 8000350:	05db      	lsls	r3, r3, #23
 8000352:	2201      	movs	r2, #1
 8000354:	0018      	movs	r0, r3
 8000356:	f001 f843 	bl	80013e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	2301      	movs	r3, #1
 8000360:	425b      	negs	r3, r3
 8000362:	6879      	ldr	r1, [r7, #4]
 8000364:	4803      	ldr	r0, [pc, #12]	; (8000374 <ST7735_WriteData+0x34>)
 8000366:	f001 fd4f 	bl	8001e08 <HAL_SPI_Transmit>
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b002      	add	sp, #8
 8000370:	bd80      	pop	{r7, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	2000003c 	.word	0x2000003c

08000378 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	1c5a      	adds	r2, r3, #1
 8000384:	607a      	str	r2, [r7, #4]
 8000386:	220f      	movs	r2, #15
 8000388:	18ba      	adds	r2, r7, r2
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 800038e:	e04a      	b.n	8000426 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	1c5a      	adds	r2, r3, #1
 8000394:	607a      	str	r2, [r7, #4]
 8000396:	210b      	movs	r1, #11
 8000398:	187a      	adds	r2, r7, r1
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	0018      	movs	r0, r3
 80003a4:	f7ff ffb0 	bl	8000308 <ST7735_WriteCommand>

        numArgs = *addr++;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	607a      	str	r2, [r7, #4]
 80003ae:	200a      	movs	r0, #10
 80003b0:	183a      	adds	r2, r7, r0
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80003b6:	183b      	adds	r3, r7, r0
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	230c      	movs	r3, #12
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	2180      	movs	r1, #128	; 0x80
 80003c2:	400a      	ands	r2, r1
 80003c4:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 80003c6:	183b      	adds	r3, r7, r0
 80003c8:	183a      	adds	r2, r7, r0
 80003ca:	7812      	ldrb	r2, [r2, #0]
 80003cc:	217f      	movs	r1, #127	; 0x7f
 80003ce:	400a      	ands	r2, r1
 80003d0:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 80003d2:	183b      	adds	r3, r7, r0
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d00c      	beq.n	80003f4 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80003da:	0004      	movs	r4, r0
 80003dc:	183b      	adds	r3, r7, r0
 80003de:	781a      	ldrb	r2, [r3, #0]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	0011      	movs	r1, r2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f7ff ffab 	bl	8000340 <ST7735_WriteData>
            addr += numArgs;
 80003ea:	193b      	adds	r3, r7, r4
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	18d3      	adds	r3, r2, r3
 80003f2:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80003f4:	210c      	movs	r1, #12
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d013      	beq.n	8000426 <DisplayInit+0xae>
            ms = *addr++;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	607a      	str	r2, [r7, #4]
 8000404:	781a      	ldrb	r2, [r3, #0]
 8000406:	187b      	adds	r3, r7, r1
 8000408:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	2bff      	cmp	r3, #255	; 0xff
 8000410:	d103      	bne.n	800041a <DisplayInit+0xa2>
 8000412:	187b      	adds	r3, r7, r1
 8000414:	22fa      	movs	r2, #250	; 0xfa
 8000416:	0052      	lsls	r2, r2, #1
 8000418:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 800041a:	230c      	movs	r3, #12
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	0018      	movs	r0, r3
 8000422:	f000 fd95 	bl	8000f50 <HAL_Delay>
    while(numCommands--) {
 8000426:	220f      	movs	r2, #15
 8000428:	18bb      	adds	r3, r7, r2
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	18ba      	adds	r2, r7, r2
 800042e:	1e59      	subs	r1, r3, #1
 8000430:	7011      	strb	r1, [r2, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1ac      	bne.n	8000390 <DisplayInit+0x18>
        }
    }
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	b005      	add	sp, #20
 800043e:	bd90      	pop	{r4, r7, pc}

08000440 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000440:	b5b0      	push	{r4, r5, r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	0005      	movs	r5, r0
 8000448:	000c      	movs	r4, r1
 800044a:	0010      	movs	r0, r2
 800044c:	0019      	movs	r1, r3
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	1c2a      	adds	r2, r5, #0
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	1dbb      	adds	r3, r7, #6
 8000456:	1c22      	adds	r2, r4, #0
 8000458:	701a      	strb	r2, [r3, #0]
 800045a:	1d7b      	adds	r3, r7, #5
 800045c:	1c02      	adds	r2, r0, #0
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	1c0a      	adds	r2, r1, #0
 8000464:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000466:	202a      	movs	r0, #42	; 0x2a
 8000468:	f7ff ff4e 	bl	8000308 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800046c:	210c      	movs	r1, #12
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <ST7735_SetAddressWindow+0xa8>)
 8000476:	781a      	ldrb	r2, [r3, #0]
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	18d3      	adds	r3, r2, r3
 800047e:	b2da      	uxtb	r2, r3
 8000480:	187b      	adds	r3, r7, r1
 8000482:	705a      	strb	r2, [r3, #1]
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2200      	movs	r2, #0
 8000488:	709a      	strb	r2, [r3, #2]
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <ST7735_SetAddressWindow+0xa8>)
 800048c:	781a      	ldrb	r2, [r3, #0]
 800048e:	1d7b      	adds	r3, r7, #5
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	18d3      	adds	r3, r2, r3
 8000494:	b2da      	uxtb	r2, r3
 8000496:	187b      	adds	r3, r7, r1
 8000498:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800049a:	000c      	movs	r4, r1
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2104      	movs	r1, #4
 80004a0:	0018      	movs	r0, r3
 80004a2:	f7ff ff4d 	bl	8000340 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80004a6:	202b      	movs	r0, #43	; 0x2b
 80004a8:	f7ff ff2e 	bl	8000308 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <ST7735_SetAddressWindow+0xac>)
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	1dbb      	adds	r3, r7, #6
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	18d3      	adds	r3, r2, r3
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	0021      	movs	r1, r4
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <ST7735_SetAddressWindow+0xac>)
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	18d3      	adds	r3, r2, r3
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2104      	movs	r1, #4
 80004d2:	0018      	movs	r0, r3
 80004d4:	f7ff ff34 	bl	8000340 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80004d8:	202c      	movs	r0, #44	; 0x2c
 80004da:	f7ff ff15 	bl	8000308 <ST7735_WriteCommand>
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b004      	add	sp, #16
 80004e4:	bdb0      	pop	{r4, r5, r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	20000037 	.word	0x20000037
 80004ec:	20000038 	.word	0x20000038

080004f0 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	0002      	movs	r2, r0
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 80004fc:	f7ff fed2 	bl	80002a4 <ST7735_Select>
    ST7735_Reset();
 8000500:	f7ff feec 	bl	80002dc <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <ST7735_Init+0x50>)
 8000506:	0018      	movs	r0, r3
 8000508:	f7ff ff36 	bl	8000378 <DisplayInit>
    DisplayInit(init_cmds2);
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <ST7735_Init+0x54>)
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff ff32 	bl	8000378 <DisplayInit>
    DisplayInit(init_cmds3);
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <ST7735_Init+0x58>)
 8000516:	0018      	movs	r0, r3
 8000518:	f7ff ff2e 	bl	8000378 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <ST7735_Init+0x5c>)
 800051e:	2202      	movs	r2, #2
 8000520:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <ST7735_Init+0x60>)
 8000524:	2203      	movs	r2, #3
 8000526:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	0018      	movs	r0, r3
 800052e:	f000 f811 	bl	8000554 <ST7735_SetRotation>
    ST7735_Unselect();
 8000532:	f7ff fec5 	bl	80002c0 <ST7735_Unselect>

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	08002434 	.word	0x08002434
 8000544:	0800246c 	.word	0x0800246c
 8000548:	0800247c 	.word	0x0800247c
 800054c:	20000035 	.word	0x20000035
 8000550:	20000036 	.word	0x20000036

08000554 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	0002      	movs	r2, r0
 800055c:	1dfb      	adds	r3, r7, #7
 800055e:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8000560:	230f      	movs	r3, #15
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2203      	movs	r2, #3
 800056e:	4013      	ands	r3, r2
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <ST7735_SetRotation+0xf8>)
 8000574:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000576:	4b35      	ldr	r3, [pc, #212]	; (800064c <ST7735_SetRotation+0xf8>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b03      	cmp	r3, #3
 800057c:	d041      	beq.n	8000602 <ST7735_SetRotation+0xae>
 800057e:	dc53      	bgt.n	8000628 <ST7735_SetRotation+0xd4>
 8000580:	2b02      	cmp	r3, #2
 8000582:	d02b      	beq.n	80005dc <ST7735_SetRotation+0x88>
 8000584:	dc50      	bgt.n	8000628 <ST7735_SetRotation+0xd4>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d002      	beq.n	8000590 <ST7735_SetRotation+0x3c>
 800058a:	2b01      	cmp	r3, #1
 800058c:	d013      	beq.n	80005b6 <ST7735_SetRotation+0x62>
 800058e:	e04b      	b.n	8000628 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000590:	230f      	movs	r3, #15
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	22c0      	movs	r2, #192	; 0xc0
 8000596:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <ST7735_SetRotation+0xfc>)
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800059e:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <ST7735_SetRotation+0x100>)
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80005a4:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <ST7735_SetRotation+0x104>)
 80005a6:	781a      	ldrb	r2, [r3, #0]
 80005a8:	4b2c      	ldr	r3, [pc, #176]	; (800065c <ST7735_SetRotation+0x108>)
 80005aa:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80005ac:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <ST7735_SetRotation+0x10c>)
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <ST7735_SetRotation+0x110>)
 80005b2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80005b4:	e038      	b.n	8000628 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80005b6:	230f      	movs	r3, #15
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	22a0      	movs	r2, #160	; 0xa0
 80005bc:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <ST7735_SetRotation+0x100>)
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <ST7735_SetRotation+0xfc>)
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <ST7735_SetRotation+0x104>)
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	4b25      	ldr	r3, [pc, #148]	; (8000664 <ST7735_SetRotation+0x110>)
 80005d0:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <ST7735_SetRotation+0x10c>)
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <ST7735_SetRotation+0x108>)
 80005d8:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80005da:	e025      	b.n	8000628 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80005dc:	230f      	movs	r3, #15
 80005de:	18fb      	adds	r3, r7, r3
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <ST7735_SetRotation+0xfc>)
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <ST7735_SetRotation+0x100>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <ST7735_SetRotation+0x104>)
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <ST7735_SetRotation+0x108>)
 80005f6:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <ST7735_SetRotation+0x10c>)
 80005fa:	781a      	ldrb	r2, [r3, #0]
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <ST7735_SetRotation+0x110>)
 80005fe:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000600:	e012      	b.n	8000628 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000602:	230f      	movs	r3, #15
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	2260      	movs	r2, #96	; 0x60
 8000608:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <ST7735_SetRotation+0x100>)
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <ST7735_SetRotation+0xfc>)
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <ST7735_SetRotation+0x104>)
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <ST7735_SetRotation+0x110>)
 800061c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <ST7735_SetRotation+0x10c>)
 8000620:	781a      	ldrb	r2, [r3, #0]
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <ST7735_SetRotation+0x108>)
 8000624:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000626:	46c0      	nop			; (mov r8, r8)
  }
  ST7735_Select();
 8000628:	f7ff fe3c 	bl	80002a4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800062c:	2036      	movs	r0, #54	; 0x36
 800062e:	f7ff fe6b 	bl	8000308 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000632:	230f      	movs	r3, #15
 8000634:	18fb      	adds	r3, r7, r3
 8000636:	2101      	movs	r1, #1
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff fe81 	bl	8000340 <ST7735_WriteData>
  ST7735_Unselect();
 800063e:	f7ff fe3f 	bl	80002c0 <ST7735_Unselect>
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b004      	add	sp, #16
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	20000034 	.word	0x20000034
 8000650:	20000032 	.word	0x20000032
 8000654:	20000030 	.word	0x20000030
 8000658:	20000035 	.word	0x20000035
 800065c:	20000037 	.word	0x20000037
 8000660:	20000036 	.word	0x20000036
 8000664:	20000038 	.word	0x20000038

08000668 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000668:	b082      	sub	sp, #8
 800066a:	b5b0      	push	{r4, r5, r7, lr}
 800066c:	b088      	sub	sp, #32
 800066e:	af00      	add	r7, sp, #0
 8000670:	0004      	movs	r4, r0
 8000672:	0008      	movs	r0, r1
 8000674:	0011      	movs	r1, r2
 8000676:	2204      	movs	r2, #4
 8000678:	2530      	movs	r5, #48	; 0x30
 800067a:	1952      	adds	r2, r2, r5
 800067c:	19d2      	adds	r2, r2, r7
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	1dbb      	adds	r3, r7, #6
 8000682:	1c22      	adds	r2, r4, #0
 8000684:	801a      	strh	r2, [r3, #0]
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	1c02      	adds	r2, r0, #0
 800068a:	801a      	strh	r2, [r3, #0]
 800068c:	1cfb      	adds	r3, r7, #3
 800068e:	1c0a      	adds	r2, r1, #0
 8000690:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000692:	1dbb      	adds	r3, r7, #6
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	b2d8      	uxtb	r0, r3
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	b2d9      	uxtb	r1, r3
 800069e:	1dbb      	adds	r3, r7, #6
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	2304      	movs	r3, #4
 80006a6:	195b      	adds	r3, r3, r5
 80006a8:	19db      	adds	r3, r3, r7
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	18d3      	adds	r3, r2, r3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	3b01      	subs	r3, #1
 80006b2:	b2dc      	uxtb	r4, r3
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	2304      	movs	r3, #4
 80006bc:	195b      	adds	r3, r3, r5
 80006be:	19db      	adds	r3, r3, r7
 80006c0:	785b      	ldrb	r3, [r3, #1]
 80006c2:	18d3      	adds	r3, r2, r3
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	3b01      	subs	r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	0022      	movs	r2, r4
 80006cc:	f7ff feb8 	bl	8000440 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
 80006d4:	e053      	b.n	800077e <ST7735_WriteChar+0x116>
        b = font.data[(ch - 32) * font.height + i];
 80006d6:	2304      	movs	r3, #4
 80006d8:	2030      	movs	r0, #48	; 0x30
 80006da:	181b      	adds	r3, r3, r0
 80006dc:	19db      	adds	r3, r3, r7
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	1cfb      	adds	r3, r7, #3
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	3b20      	subs	r3, #32
 80006e6:	2104      	movs	r1, #4
 80006e8:	1809      	adds	r1, r1, r0
 80006ea:	19c9      	adds	r1, r1, r7
 80006ec:	7849      	ldrb	r1, [r1, #1]
 80006ee:	434b      	muls	r3, r1
 80006f0:	0019      	movs	r1, r3
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	18cb      	adds	r3, r1, r3
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	18d3      	adds	r3, r2, r3
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	e030      	b.n	8000766 <ST7735_WriteChar+0xfe>
            if((b << j) & 0x8000)  {
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	409a      	lsls	r2, r3
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	4013      	ands	r3, r2
 8000710:	d013      	beq.n	800073a <ST7735_WriteChar+0xd2>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000712:	203c      	movs	r0, #60	; 0x3c
 8000714:	183b      	adds	r3, r7, r0
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2da      	uxtb	r2, r3
 800071e:	2110      	movs	r1, #16
 8000720:	187b      	adds	r3, r7, r1
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	183b      	adds	r3, r7, r0
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	187b      	adds	r3, r7, r1
 800072c:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2102      	movs	r1, #2
 8000732:	0018      	movs	r0, r3
 8000734:	f7ff fe04 	bl	8000340 <ST7735_WriteData>
 8000738:	e012      	b.n	8000760 <ST7735_WriteChar+0xf8>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800073a:	2040      	movs	r0, #64	; 0x40
 800073c:	183b      	adds	r3, r7, r0
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	b29b      	uxth	r3, r3
 8000744:	b2da      	uxtb	r2, r3
 8000746:	210c      	movs	r1, #12
 8000748:	187b      	adds	r3, r7, r1
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	183b      	adds	r3, r7, r0
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	187b      	adds	r3, r7, r1
 8000754:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2102      	movs	r1, #2
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff fdf0 	bl	8000340 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	3301      	adds	r3, #1
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	2304      	movs	r3, #4
 8000768:	2230      	movs	r2, #48	; 0x30
 800076a:	189b      	adds	r3, r3, r2
 800076c:	19db      	adds	r3, r3, r7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	001a      	movs	r2, r3
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	4293      	cmp	r3, r2
 8000776:	d3c5      	bcc.n	8000704 <ST7735_WriteChar+0x9c>
    for(i = 0; i < font.height; i++) {
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	3301      	adds	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
 800077e:	2304      	movs	r3, #4
 8000780:	2230      	movs	r2, #48	; 0x30
 8000782:	189b      	adds	r3, r3, r2
 8000784:	19db      	adds	r3, r3, r7
 8000786:	785b      	ldrb	r3, [r3, #1]
 8000788:	001a      	movs	r2, r3
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	4293      	cmp	r3, r2
 800078e:	d3a2      	bcc.n	80006d6 <ST7735_WriteChar+0x6e>
            }
        }
    }
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b008      	add	sp, #32
 8000798:	bcb0      	pop	{r4, r5, r7}
 800079a:	bc08      	pop	{r3}
 800079c:	b002      	add	sp, #8
 800079e:	4718      	bx	r3

080007a0 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80007a0:	b082      	sub	sp, #8
 80007a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a4:	b087      	sub	sp, #28
 80007a6:	af04      	add	r7, sp, #16
 80007a8:	603a      	str	r2, [r7, #0]
 80007aa:	2204      	movs	r2, #4
 80007ac:	2418      	movs	r4, #24
 80007ae:	1912      	adds	r2, r2, r4
 80007b0:	2408      	movs	r4, #8
 80007b2:	46a4      	mov	ip, r4
 80007b4:	44bc      	add	ip, r7
 80007b6:	4462      	add	r2, ip
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	1dbb      	adds	r3, r7, #6
 80007bc:	1c02      	adds	r2, r0, #0
 80007be:	801a      	strh	r2, [r3, #0]
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	1c0a      	adds	r2, r1, #0
 80007c4:	801a      	strh	r2, [r3, #0]
    ST7735_Select();
 80007c6:	f7ff fd6d 	bl	80002a4 <ST7735_Select>

    while(*str) {
 80007ca:	e067      	b.n	800089c <ST7735_WriteString+0xfc>
        if(x + font.width >= _width) {
 80007cc:	1dbb      	adds	r3, r7, #6
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	2204      	movs	r2, #4
 80007d2:	2118      	movs	r1, #24
 80007d4:	1852      	adds	r2, r2, r1
 80007d6:	2008      	movs	r0, #8
 80007d8:	4684      	mov	ip, r0
 80007da:	44bc      	add	ip, r7
 80007dc:	4462      	add	r2, ip
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	189b      	adds	r3, r3, r2
 80007e2:	4a36      	ldr	r2, [pc, #216]	; (80008bc <ST7735_WriteString+0x11c>)
 80007e4:	2000      	movs	r0, #0
 80007e6:	5e12      	ldrsh	r2, [r2, r0]
 80007e8:	4293      	cmp	r3, r2
 80007ea:	db27      	blt.n	800083c <ST7735_WriteString+0x9c>
            x = 0;
 80007ec:	1dbb      	adds	r3, r7, #6
 80007ee:	2200      	movs	r2, #0
 80007f0:	801a      	strh	r2, [r3, #0]
            y += font.height;
 80007f2:	2304      	movs	r3, #4
 80007f4:	0008      	movs	r0, r1
 80007f6:	185b      	adds	r3, r3, r1
 80007f8:	2208      	movs	r2, #8
 80007fa:	4694      	mov	ip, r2
 80007fc:	44bc      	add	ip, r7
 80007fe:	4463      	add	r3, ip
 8000800:	785b      	ldrb	r3, [r3, #1]
 8000802:	b299      	uxth	r1, r3
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	1d3a      	adds	r2, r7, #4
 8000808:	8812      	ldrh	r2, [r2, #0]
 800080a:	188a      	adds	r2, r1, r2
 800080c:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= _height) {
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	2204      	movs	r2, #4
 8000814:	1812      	adds	r2, r2, r0
 8000816:	2108      	movs	r1, #8
 8000818:	468c      	mov	ip, r1
 800081a:	44bc      	add	ip, r7
 800081c:	4462      	add	r2, ip
 800081e:	7852      	ldrb	r2, [r2, #1]
 8000820:	189b      	adds	r3, r3, r2
 8000822:	4a27      	ldr	r2, [pc, #156]	; (80008c0 <ST7735_WriteString+0x120>)
 8000824:	2100      	movs	r1, #0
 8000826:	5e52      	ldrsh	r2, [r2, r1]
 8000828:	4293      	cmp	r3, r2
 800082a:	da3c      	bge.n	80008a6 <ST7735_WriteString+0x106>
                break;
            }

            if(*str == ' ') {
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b20      	cmp	r3, #32
 8000832:	d103      	bne.n	800083c <ST7735_WriteString+0x9c>
                // skip spaces in the beginning of the new line
                str++;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	603b      	str	r3, [r7, #0]
                continue;
 800083a:	e02f      	b.n	800089c <ST7735_WriteString+0xfc>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	781d      	ldrb	r5, [r3, #0]
 8000840:	2304      	movs	r3, #4
 8000842:	2618      	movs	r6, #24
 8000844:	199b      	adds	r3, r3, r6
 8000846:	2208      	movs	r2, #8
 8000848:	4694      	mov	ip, r2
 800084a:	44bc      	add	ip, r7
 800084c:	4463      	add	r3, ip
 800084e:	1d3a      	adds	r2, r7, #4
 8000850:	8814      	ldrh	r4, [r2, #0]
 8000852:	1dba      	adds	r2, r7, #6
 8000854:	8810      	ldrh	r0, [r2, #0]
 8000856:	2228      	movs	r2, #40	; 0x28
 8000858:	2108      	movs	r1, #8
 800085a:	1852      	adds	r2, r2, r1
 800085c:	19d2      	adds	r2, r2, r7
 800085e:	8812      	ldrh	r2, [r2, #0]
 8000860:	9202      	str	r2, [sp, #8]
 8000862:	2224      	movs	r2, #36	; 0x24
 8000864:	1852      	adds	r2, r2, r1
 8000866:	19d2      	adds	r2, r2, r7
 8000868:	8812      	ldrh	r2, [r2, #0]
 800086a:	9201      	str	r2, [sp, #4]
 800086c:	466a      	mov	r2, sp
 800086e:	6859      	ldr	r1, [r3, #4]
 8000870:	6011      	str	r1, [r2, #0]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	002a      	movs	r2, r5
 8000876:	0021      	movs	r1, r4
 8000878:	f7ff fef6 	bl	8000668 <ST7735_WriteChar>
        x += font.width;
 800087c:	2304      	movs	r3, #4
 800087e:	199b      	adds	r3, r3, r6
 8000880:	2208      	movs	r2, #8
 8000882:	4694      	mov	ip, r2
 8000884:	44bc      	add	ip, r7
 8000886:	4463      	add	r3, ip
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b299      	uxth	r1, r3
 800088c:	1dbb      	adds	r3, r7, #6
 800088e:	1dba      	adds	r2, r7, #6
 8000890:	8812      	ldrh	r2, [r2, #0]
 8000892:	188a      	adds	r2, r1, r2
 8000894:	801a      	strh	r2, [r3, #0]
        str++;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d193      	bne.n	80007cc <ST7735_WriteString+0x2c>
 80008a4:	e000      	b.n	80008a8 <ST7735_WriteString+0x108>
                break;
 80008a6:	46c0      	nop			; (mov r8, r8)
    }

    ST7735_Unselect();
 80008a8:	f7ff fd0a 	bl	80002c0 <ST7735_Unselect>
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b003      	add	sp, #12
 80008b2:	bcf0      	pop	{r4, r5, r6, r7}
 80008b4:	bc08      	pop	{r3}
 80008b6:	b002      	add	sp, #8
 80008b8:	4718      	bx	r3
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000030 	.word	0x20000030
 80008c0:	20000032 	.word	0x20000032

080008c4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80008c4:	b5b0      	push	{r4, r5, r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	0005      	movs	r5, r0
 80008cc:	000c      	movs	r4, r1
 80008ce:	0010      	movs	r0, r2
 80008d0:	0019      	movs	r1, r3
 80008d2:	1dbb      	adds	r3, r7, #6
 80008d4:	1c2a      	adds	r2, r5, #0
 80008d6:	801a      	strh	r2, [r3, #0]
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	1c22      	adds	r2, r4, #0
 80008dc:	801a      	strh	r2, [r3, #0]
 80008de:	1cbb      	adds	r3, r7, #2
 80008e0:	1c02      	adds	r2, r0, #0
 80008e2:	801a      	strh	r2, [r3, #0]
 80008e4:	003b      	movs	r3, r7
 80008e6:	1c0a      	adds	r2, r1, #0
 80008e8:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 80008ea:	1dbb      	adds	r3, r7, #6
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	4a4a      	ldr	r2, [pc, #296]	; (8000a18 <ST7735_FillRectangle+0x154>)
 80008f0:	2100      	movs	r1, #0
 80008f2:	5e52      	ldrsh	r2, [r2, r1]
 80008f4:	4293      	cmp	r3, r2
 80008f6:	db00      	blt.n	80008fa <ST7735_FillRectangle+0x36>
 80008f8:	e089      	b.n	8000a0e <ST7735_FillRectangle+0x14a>
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	4a47      	ldr	r2, [pc, #284]	; (8000a1c <ST7735_FillRectangle+0x158>)
 8000900:	2100      	movs	r1, #0
 8000902:	5e52      	ldrsh	r2, [r2, r1]
 8000904:	4293      	cmp	r3, r2
 8000906:	db00      	blt.n	800090a <ST7735_FillRectangle+0x46>
 8000908:	e081      	b.n	8000a0e <ST7735_FillRectangle+0x14a>
    if((x + w - 1) >= _width) w = _width - x;
 800090a:	1dbb      	adds	r3, r7, #6
 800090c:	881a      	ldrh	r2, [r3, #0]
 800090e:	1cbb      	adds	r3, r7, #2
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	18d3      	adds	r3, r2, r3
 8000914:	4a40      	ldr	r2, [pc, #256]	; (8000a18 <ST7735_FillRectangle+0x154>)
 8000916:	2100      	movs	r1, #0
 8000918:	5e52      	ldrsh	r2, [r2, r1]
 800091a:	4293      	cmp	r3, r2
 800091c:	dd08      	ble.n	8000930 <ST7735_FillRectangle+0x6c>
 800091e:	4b3e      	ldr	r3, [pc, #248]	; (8000a18 <ST7735_FillRectangle+0x154>)
 8000920:	2200      	movs	r2, #0
 8000922:	5e9b      	ldrsh	r3, [r3, r2]
 8000924:	b299      	uxth	r1, r3
 8000926:	1cbb      	adds	r3, r7, #2
 8000928:	1dba      	adds	r2, r7, #6
 800092a:	8812      	ldrh	r2, [r2, #0]
 800092c:	1a8a      	subs	r2, r1, r2
 800092e:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	881a      	ldrh	r2, [r3, #0]
 8000934:	003b      	movs	r3, r7
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	4a38      	ldr	r2, [pc, #224]	; (8000a1c <ST7735_FillRectangle+0x158>)
 800093c:	2100      	movs	r1, #0
 800093e:	5e52      	ldrsh	r2, [r2, r1]
 8000940:	4293      	cmp	r3, r2
 8000942:	dd08      	ble.n	8000956 <ST7735_FillRectangle+0x92>
 8000944:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <ST7735_FillRectangle+0x158>)
 8000946:	2200      	movs	r2, #0
 8000948:	5e9b      	ldrsh	r3, [r3, r2]
 800094a:	b299      	uxth	r1, r3
 800094c:	003b      	movs	r3, r7
 800094e:	1d3a      	adds	r2, r7, #4
 8000950:	8812      	ldrh	r2, [r2, #0]
 8000952:	1a8a      	subs	r2, r1, r2
 8000954:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8000956:	f7ff fca5 	bl	80002a4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800095a:	1dbb      	adds	r3, r7, #6
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	b2d8      	uxtb	r0, r3
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	b2d9      	uxtb	r1, r3
 8000966:	1dbb      	adds	r3, r7, #6
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	1cbb      	adds	r3, r7, #2
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	18d3      	adds	r3, r2, r3
 8000974:	b2db      	uxtb	r3, r3
 8000976:	3b01      	subs	r3, #1
 8000978:	b2dc      	uxtb	r4, r3
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	003b      	movs	r3, r7
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	18d3      	adds	r3, r2, r3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	3b01      	subs	r3, #1
 800098c:	b2db      	uxtb	r3, r3
 800098e:	0022      	movs	r2, r4
 8000990:	f7ff fd56 	bl	8000440 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000994:	2120      	movs	r1, #32
 8000996:	187b      	adds	r3, r7, r1
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	0a1b      	lsrs	r3, r3, #8
 800099c:	b29b      	uxth	r3, r3
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	200c      	movs	r0, #12
 80009a2:	183b      	adds	r3, r7, r0
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	183b      	adds	r3, r7, r0
 80009ae:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	0099      	lsls	r1, r3, #2
 80009b4:	2390      	movs	r3, #144	; 0x90
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	2201      	movs	r2, #1
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 fd10 	bl	80013e0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	003a      	movs	r2, r7
 80009c4:	8812      	ldrh	r2, [r2, #0]
 80009c6:	801a      	strh	r2, [r3, #0]
 80009c8:	e01a      	b.n	8000a00 <ST7735_FillRectangle+0x13c>
        for(x = w; x > 0; x--) {
 80009ca:	1dbb      	adds	r3, r7, #6
 80009cc:	1cba      	adds	r2, r7, #2
 80009ce:	8812      	ldrh	r2, [r2, #0]
 80009d0:	801a      	strh	r2, [r3, #0]
 80009d2:	e00c      	b.n	80009ee <ST7735_FillRectangle+0x12a>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80009d4:	2301      	movs	r3, #1
 80009d6:	425b      	negs	r3, r3
 80009d8:	220c      	movs	r2, #12
 80009da:	18b9      	adds	r1, r7, r2
 80009dc:	4810      	ldr	r0, [pc, #64]	; (8000a20 <ST7735_FillRectangle+0x15c>)
 80009de:	2202      	movs	r2, #2
 80009e0:	f001 fa12 	bl	8001e08 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80009e4:	1dbb      	adds	r3, r7, #6
 80009e6:	881a      	ldrh	r2, [r3, #0]
 80009e8:	1dbb      	adds	r3, r7, #6
 80009ea:	3a01      	subs	r2, #1
 80009ec:	801a      	strh	r2, [r3, #0]
 80009ee:	1dbb      	adds	r3, r7, #6
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1ee      	bne.n	80009d4 <ST7735_FillRectangle+0x110>
    for(y = h; y > 0; y--) {
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	881a      	ldrh	r2, [r3, #0]
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	3a01      	subs	r2, #1
 80009fe:	801a      	strh	r2, [r3, #0]
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1e0      	bne.n	80009ca <ST7735_FillRectangle+0x106>
        }
    }

    ST7735_Unselect();
 8000a08:	f7ff fc5a 	bl	80002c0 <ST7735_Unselect>
 8000a0c:	e000      	b.n	8000a10 <ST7735_FillRectangle+0x14c>
    if((x >= _width) || (y >= _height)) return;
 8000a0e:	46c0      	nop			; (mov r8, r8)
}
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b004      	add	sp, #16
 8000a14:	bdb0      	pop	{r4, r5, r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	20000030 	.word	0x20000030
 8000a1c:	20000032 	.word	0x20000032
 8000a20:	2000003c 	.word	0x2000003c

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2a:	f000 fa2d 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2e:	f000 f841 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a32:	f000 f8c9 	bl	8000bc8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a36:	f000 f887 	bl	8000b48 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(0);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff fd58 	bl	80004f0 <ST7735_Init>
  fillScreen(WHITE);
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <main+0x7c>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fc12 	bl	800026c <fillScreen>
  ST7735_SetRotation(0);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff fd83 	bl	8000554 <ST7735_SetRotation>
  ST7735_FillRectangle(8, 9, 112, 112, RED);
 8000a4e:	231f      	movs	r3, #31
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2370      	movs	r3, #112	; 0x70
 8000a54:	2270      	movs	r2, #112	; 0x70
 8000a56:	2109      	movs	r1, #9
 8000a58:	2008      	movs	r0, #8
 8000a5a:	f7ff ff33 	bl	80008c4 <ST7735_FillRectangle>
  ST7735_WriteString(20, 40, "Circuit", Font_11x18, BLUE, YELLOW);
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <main+0x80>)
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <main+0x84>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <main+0x88>)
 8000a64:	9202      	str	r2, [sp, #8]
 8000a66:	22f8      	movs	r2, #248	; 0xf8
 8000a68:	0212      	lsls	r2, r2, #8
 8000a6a:	9201      	str	r2, [sp, #4]
 8000a6c:	466a      	mov	r2, sp
 8000a6e:	6859      	ldr	r1, [r3, #4]
 8000a70:	6011      	str	r1, [r2, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	0002      	movs	r2, r0
 8000a76:	2128      	movs	r1, #40	; 0x28
 8000a78:	2014      	movs	r0, #20
 8000a7a:	f7ff fe91 	bl	80007a0 <ST7735_WriteString>
  ST7735_WriteString(20, 58, "Shala", Font_11x18, BLUE, YELLOW);
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <main+0x80>)
 8000a80:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <main+0x8c>)
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <main+0x88>)
 8000a84:	9202      	str	r2, [sp, #8]
 8000a86:	22f8      	movs	r2, #248	; 0xf8
 8000a88:	0212      	lsls	r2, r2, #8
 8000a8a:	9201      	str	r2, [sp, #4]
 8000a8c:	466a      	mov	r2, sp
 8000a8e:	6859      	ldr	r1, [r3, #4]
 8000a90:	6011      	str	r1, [r2, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	0002      	movs	r2, r0
 8000a96:	213a      	movs	r1, #58	; 0x3a
 8000a98:	2014      	movs	r0, #20
 8000a9a:	f7ff fe81 	bl	80007a0 <ST7735_WriteString>
  //testAll();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <main+0x7a>
 8000aa0:	0000ffff 	.word	0x0000ffff
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	08002424 	.word	0x08002424
 8000aac:	000007ff 	.word	0x000007ff
 8000ab0:	0800242c 	.word	0x0800242c

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b091      	sub	sp, #68	; 0x44
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	2410      	movs	r4, #16
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	0018      	movs	r0, r3
 8000ac0:	2330      	movs	r3, #48	; 0x30
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f001 fc99 	bl	80023fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aca:	003b      	movs	r3, r7
 8000acc:	0018      	movs	r0, r3
 8000ace:	2310      	movs	r3, #16
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	f001 fc92 	bl	80023fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad8:	0021      	movs	r1, r4
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2202      	movs	r2, #2
 8000ade:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2210      	movs	r2, #16
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2202      	movs	r2, #2
 8000af0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2200      	movs	r2, #0
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	22a0      	movs	r2, #160	; 0xa0
 8000afc:	0392      	lsls	r2, r2, #14
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 fc87 	bl	800141c <HAL_RCC_OscConfig>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b12:	f000 f8fd 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b16:	003b      	movs	r3, r7
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	2202      	movs	r2, #2
 8000b20:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	003b      	movs	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2101      	movs	r1, #1
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 ff8c 	bl	8001a50 <HAL_RCC_ClockConfig>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b3c:	f000 f8e8 	bl	8000d10 <Error_Handler>
  }
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b011      	add	sp, #68	; 0x44
 8000b46:	bd90      	pop	{r4, r7, pc}

08000b48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b4e:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <MX_SPI1_Init+0x7c>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b54:	2282      	movs	r2, #130	; 0x82
 8000b56:	0052      	lsls	r2, r2, #1
 8000b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	0212      	lsls	r2, r2, #8
 8000b60:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b64:	22e0      	movs	r2, #224	; 0xe0
 8000b66:	00d2      	lsls	r2, r2, #3
 8000b68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b80:	2218      	movs	r2, #24
 8000b82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000ba4:	2208      	movs	r2, #8
 8000ba6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f001 f874 	bl	8001c98 <HAL_SPI_Init>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000bb4:	f000 f8ac 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	2000003c 	.word	0x2000003c
 8000bc4:	40013000 	.word	0x40013000

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	240c      	movs	r4, #12
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	2314      	movs	r3, #20
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f001 fc0f 	bl	80023fc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <MX_GPIO_Init+0x13c>)
 8000be0:	695a      	ldr	r2, [r3, #20]
 8000be2:	4b48      	ldr	r3, [pc, #288]	; (8000d04 <MX_GPIO_Init+0x13c>)
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	0289      	lsls	r1, r1, #10
 8000be8:	430a      	orrs	r2, r1
 8000bea:	615a      	str	r2, [r3, #20]
 8000bec:	4b45      	ldr	r3, [pc, #276]	; (8000d04 <MX_GPIO_Init+0x13c>)
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	029b      	lsls	r3, r3, #10
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	4b42      	ldr	r3, [pc, #264]	; (8000d04 <MX_GPIO_Init+0x13c>)
 8000bfc:	695a      	ldr	r2, [r3, #20]
 8000bfe:	4b41      	ldr	r3, [pc, #260]	; (8000d04 <MX_GPIO_Init+0x13c>)
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	0309      	lsls	r1, r1, #12
 8000c04:	430a      	orrs	r2, r1
 8000c06:	615a      	str	r2, [r3, #20]
 8000c08:	4b3e      	ldr	r3, [pc, #248]	; (8000d04 <MX_GPIO_Init+0x13c>)
 8000c0a:	695a      	ldr	r2, [r3, #20]
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	031b      	lsls	r3, r3, #12
 8000c10:	4013      	ands	r3, r2
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <MX_GPIO_Init+0x13c>)
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	4b3a      	ldr	r3, [pc, #232]	; (8000d04 <MX_GPIO_Init+0x13c>)
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	02c9      	lsls	r1, r1, #11
 8000c20:	430a      	orrs	r2, r1
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <MX_GPIO_Init+0x13c>)
 8000c26:	695a      	ldr	r2, [r3, #20]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	02db      	lsls	r3, r3, #11
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c32:	23e0      	movs	r3, #224	; 0xe0
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4834      	ldr	r0, [pc, #208]	; (8000d08 <MX_GPIO_Init+0x140>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	f000 fbd0 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	0099      	lsls	r1, r3, #2
 8000c44:	2390      	movs	r3, #144	; 0x90
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	2200      	movs	r2, #0
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fbc8 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c50:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <MX_GPIO_Init+0x144>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 fbc2 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2290      	movs	r2, #144	; 0x90
 8000c66:	0352      	lsls	r2, r2, #13
 8000c68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c70:	193a      	adds	r2, r7, r4
 8000c72:	2390      	movs	r3, #144	; 0x90
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fa41 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LD4_Pin|LD3_Pin;
 8000c7e:	0021      	movs	r1, r4
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	22e0      	movs	r2, #224	; 0xe0
 8000c84:	0092      	lsls	r2, r2, #2
 8000c86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	000c      	movs	r4, r1
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <MX_GPIO_Init+0x140>)
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	f000 fa2c 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca8:	0021      	movs	r1, r4
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	000c      	movs	r4, r1
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	193a      	adds	r2, r7, r4
 8000cc8:	2390      	movs	r3, #144	; 0x90
 8000cca:	05db      	lsls	r3, r3, #23
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 fa16 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cd4:	0021      	movs	r1, r4
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2201      	movs	r2, #1
 8000ce0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <MX_GPIO_Init+0x144>)
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	0010      	movs	r0, r2
 8000cf6:	f000 fa03 	bl	8001100 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b009      	add	sp, #36	; 0x24
 8000d00:	bd90      	pop	{r4, r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40021000 	.word	0x40021000
 8000d08:	48000800 	.word	0x48000800
 8000d0c:	48000400 	.word	0x48000400

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_MspInit+0x44>)
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_MspInit+0x44>)
 8000d28:	2101      	movs	r1, #1
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	619a      	str	r2, [r3, #24]
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_MspInit+0x44>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	2201      	movs	r2, #1
 8000d34:	4013      	ands	r3, r2
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x44>)
 8000d3c:	69da      	ldr	r2, [r3, #28]
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_MspInit+0x44>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	0549      	lsls	r1, r1, #21
 8000d44:	430a      	orrs	r2, r1
 8000d46:	61da      	str	r2, [r3, #28]
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_MspInit+0x44>)
 8000d4a:	69da      	ldr	r2, [r3, #28]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	055b      	lsls	r3, r3, #21
 8000d50:	4013      	ands	r3, r2
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b08b      	sub	sp, #44	; 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	2414      	movs	r4, #20
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	0018      	movs	r0, r3
 8000d72:	2314      	movs	r3, #20
 8000d74:	001a      	movs	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	f001 fb40 	bl	80023fc <memset>
  if(hspi->Instance==SPI1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <HAL_SPI_MspInit+0x90>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d132      	bne.n	8000dec <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_SPI_MspInit+0x94>)
 8000d88:	699a      	ldr	r2, [r3, #24]
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <HAL_SPI_MspInit+0x94>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	0149      	lsls	r1, r1, #5
 8000d90:	430a      	orrs	r2, r1
 8000d92:	619a      	str	r2, [r3, #24]
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_SPI_MspInit+0x94>)
 8000d96:	699a      	ldr	r2, [r3, #24]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	015b      	lsls	r3, r3, #5
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_SPI_MspInit+0x94>)
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_SPI_MspInit+0x94>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0289      	lsls	r1, r1, #10
 8000dac:	430a      	orrs	r2, r1
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_SPI_MspInit+0x94>)
 8000db2:	695a      	ldr	r2, [r3, #20]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dbe:	0021      	movs	r1, r4
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	22a0      	movs	r2, #160	; 0xa0
 8000dc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2202      	movs	r2, #2
 8000dca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	187a      	adds	r2, r7, r1
 8000de0:	2390      	movs	r3, #144	; 0x90
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	0011      	movs	r1, r2
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 f98a 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b00b      	add	sp, #44	; 0x2c
 8000df2:	bd90      	pop	{r4, r7, pc}
 8000df4:	40013000 	.word	0x40013000
 8000df8:	40021000 	.word	0x40021000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 f87a 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e36:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000e38:	f7ff fff7 	bl	8000e2a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3e:	490d      	ldr	r1, [pc, #52]	; (8000e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <LoopForever+0xe>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e54:	4c0a      	ldr	r4, [pc, #40]	; (8000e80 <LoopForever+0x16>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e62:	f001 faa7 	bl	80023b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e66:	f7ff fddd 	bl	8000a24 <main>

08000e6a <LoopForever>:

LoopForever:
    b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   r0, =_estack
 8000e6c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e78:	0800323c 	.word	0x0800323c
  ldr r2, =_sbss
 8000e7c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e80:	200000a4 	.word	0x200000a4

08000e84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_COMP_IRQHandler>
	...

08000e88 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <HAL_Init+0x24>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_Init+0x24>)
 8000e92:	2110      	movs	r1, #16
 8000e94:	430a      	orrs	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 f809 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9e:	f7ff ff3d 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_InitTick+0x5c>)
 8000eba:	681c      	ldr	r4, [r3, #0]
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_InitTick+0x60>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	23fa      	movs	r3, #250	; 0xfa
 8000ec4:	0098      	lsls	r0, r3, #2
 8000ec6:	f7ff f91f 	bl	8000108 <__udivsi3>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	0019      	movs	r1, r3
 8000ece:	0020      	movs	r0, r4
 8000ed0:	f7ff f91a 	bl	8000108 <__udivsi3>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 f905 	bl	80010e6 <HAL_SYSTICK_Config>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e00f      	b.n	8000f04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d80b      	bhi.n	8000f02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	2301      	movs	r3, #1
 8000eee:	425b      	negs	r3, r3
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 f8e2 	bl	80010bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_InitTick+0x64>)
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b003      	add	sp, #12
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000010 	.word	0x20000010
 8000f14:	2000000c 	.word	0x2000000c

08000f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_IncTick+0x1c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	001a      	movs	r2, r3
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_IncTick+0x20>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	18d2      	adds	r2, r2, r3
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_IncTick+0x20>)
 8000f2a:	601a      	str	r2, [r3, #0]
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	20000010 	.word	0x20000010
 8000f38:	200000a0 	.word	0x200000a0

08000f3c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <HAL_GetTick+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	200000a0 	.word	0x200000a0

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff fff0 	bl	8000f3c <HAL_GetTick>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	001a      	movs	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	189b      	adds	r3, r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	f7ff ffe0 	bl	8000f3c <HAL_GetTick>
 8000f7c:	0002      	movs	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b004      	add	sp, #16
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	20000010 	.word	0x20000010

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b7f      	cmp	r3, #127	; 0x7f
 8000fac:	d828      	bhi.n	8001000 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fae:	4a2f      	ldr	r2, [pc, #188]	; (800106c <__NVIC_SetPriority+0xd4>)
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	33c0      	adds	r3, #192	; 0xc0
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	589b      	ldr	r3, [r3, r2]
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	21ff      	movs	r1, #255	; 0xff
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	000a      	movs	r2, r1
 8000fd0:	43d2      	mvns	r2, r2
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	019b      	lsls	r3, r3, #6
 8000fda:	22ff      	movs	r2, #255	; 0xff
 8000fdc:	401a      	ands	r2, r3
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	4003      	ands	r3, r0
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fec:	481f      	ldr	r0, [pc, #124]	; (800106c <__NVIC_SetPriority+0xd4>)
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	33c0      	adds	r3, #192	; 0xc0
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ffe:	e031      	b.n	8001064 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001000:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <__NVIC_SetPriority+0xd8>)
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	0019      	movs	r1, r3
 8001008:	230f      	movs	r3, #15
 800100a:	400b      	ands	r3, r1
 800100c:	3b08      	subs	r3, #8
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3306      	adds	r3, #6
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	18d3      	adds	r3, r2, r3
 8001016:	3304      	adds	r3, #4
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1dfa      	adds	r2, r7, #7
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	0011      	movs	r1, r2
 8001020:	2203      	movs	r2, #3
 8001022:	400a      	ands	r2, r1
 8001024:	00d2      	lsls	r2, r2, #3
 8001026:	21ff      	movs	r1, #255	; 0xff
 8001028:	4091      	lsls	r1, r2
 800102a:	000a      	movs	r2, r1
 800102c:	43d2      	mvns	r2, r2
 800102e:	401a      	ands	r2, r3
 8001030:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	019b      	lsls	r3, r3, #6
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	401a      	ands	r2, r3
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	0018      	movs	r0, r3
 8001040:	2303      	movs	r3, #3
 8001042:	4003      	ands	r3, r0
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <__NVIC_SetPriority+0xd8>)
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	001c      	movs	r4, r3
 8001050:	230f      	movs	r3, #15
 8001052:	4023      	ands	r3, r4
 8001054:	3b08      	subs	r3, #8
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	430a      	orrs	r2, r1
 800105a:	3306      	adds	r3, #6
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	18c3      	adds	r3, r0, r3
 8001060:	3304      	adds	r3, #4
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b003      	add	sp, #12
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1e5a      	subs	r2, r3, #1
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	045b      	lsls	r3, r3, #17
 8001084:	429a      	cmp	r2, r3
 8001086:	d301      	bcc.n	800108c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001088:	2301      	movs	r3, #1
 800108a:	e010      	b.n	80010ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <SysTick_Config+0x44>)
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	3a01      	subs	r2, #1
 8001092:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001094:	2301      	movs	r3, #1
 8001096:	425b      	negs	r3, r3
 8001098:	2103      	movs	r1, #3
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff ff7c 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x44>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x44>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	210f      	movs	r1, #15
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	1c02      	adds	r2, r0, #0
 80010cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b004      	add	sp, #16
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff ffbf 	bl	8001074 <SysTick_Config>
 80010f6:	0003      	movs	r3, r0
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	e14f      	b.n	80013b0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4091      	lsls	r1, r2
 800111a:	000a      	movs	r2, r1
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d100      	bne.n	8001128 <HAL_GPIO_Init+0x28>
 8001126:	e140      	b.n	80013aa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	4013      	ands	r3, r2
 8001130:	2b01      	cmp	r3, #1
 8001132:	d005      	beq.n	8001140 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2203      	movs	r2, #3
 800113a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800113c:	2b02      	cmp	r3, #2
 800113e:	d130      	bne.n	80011a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	409a      	lsls	r2, r3
 800114e:	0013      	movs	r3, r2
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	409a      	lsls	r2, r3
 8001162:	0013      	movs	r3, r2
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001176:	2201      	movs	r2, #1
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	2201      	movs	r2, #1
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2203      	movs	r2, #3
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d017      	beq.n	80011de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d123      	bne.n	8001232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	58d3      	ldr	r3, [r2, r3]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2207      	movs	r2, #7
 80011fc:	4013      	ands	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	43da      	mvns	r2, r3
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2107      	movs	r1, #7
 8001216:	400b      	ands	r3, r1
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	409a      	lsls	r2, r3
 800121c:	0013      	movs	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3208      	adds	r2, #8
 800122c:	0092      	lsls	r2, r2, #2
 800122e:	6939      	ldr	r1, [r7, #16]
 8001230:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	43da      	mvns	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2203      	movs	r2, #3
 8001250:	401a      	ands	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	23c0      	movs	r3, #192	; 0xc0
 800126c:	029b      	lsls	r3, r3, #10
 800126e:	4013      	ands	r3, r2
 8001270:	d100      	bne.n	8001274 <HAL_GPIO_Init+0x174>
 8001272:	e09a      	b.n	80013aa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001274:	4b54      	ldr	r3, [pc, #336]	; (80013c8 <HAL_GPIO_Init+0x2c8>)
 8001276:	699a      	ldr	r2, [r3, #24]
 8001278:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <HAL_GPIO_Init+0x2c8>)
 800127a:	2101      	movs	r1, #1
 800127c:	430a      	orrs	r2, r1
 800127e:	619a      	str	r2, [r3, #24]
 8001280:	4b51      	ldr	r3, [pc, #324]	; (80013c8 <HAL_GPIO_Init+0x2c8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	2201      	movs	r2, #1
 8001286:	4013      	ands	r3, r2
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800128c:	4a4f      	ldr	r2, [pc, #316]	; (80013cc <HAL_GPIO_Init+0x2cc>)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	589b      	ldr	r3, [r3, r2]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2203      	movs	r2, #3
 800129e:	4013      	ands	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	409a      	lsls	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	43da      	mvns	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	2390      	movs	r3, #144	; 0x90
 80012b4:	05db      	lsls	r3, r3, #23
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x1e2>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a44      	ldr	r2, [pc, #272]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x1de>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a43      	ldr	r2, [pc, #268]	; (80013d4 <HAL_GPIO_Init+0x2d4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x1da>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a42      	ldr	r2, [pc, #264]	; (80013d8 <HAL_GPIO_Init+0x2d8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x1d6>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x1e4>
 80012d6:	2305      	movs	r3, #5
 80012d8:	e004      	b.n	80012e4 <HAL_GPIO_Init+0x1e4>
 80012da:	2302      	movs	r3, #2
 80012dc:	e002      	b.n	80012e4 <HAL_GPIO_Init+0x1e4>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_GPIO_Init+0x1e4>
 80012e2:	2300      	movs	r3, #0
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	2103      	movs	r1, #3
 80012e8:	400a      	ands	r2, r1
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	4093      	lsls	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012f4:	4935      	ldr	r1, [pc, #212]	; (80013cc <HAL_GPIO_Init+0x2cc>)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001302:	4b36      	ldr	r3, [pc, #216]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	035b      	lsls	r3, r3, #13
 800131a:	4013      	ands	r3, r2
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43da      	mvns	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	039b      	lsls	r3, r3, #14
 8001344:	4013      	ands	r3, r2
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	029b      	lsls	r3, r3, #10
 800136e:	4013      	ands	r3, r2
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43da      	mvns	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	025b      	lsls	r3, r3, #9
 8001398:	4013      	ands	r3, r2
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	40da      	lsrs	r2, r3
 80013b8:	1e13      	subs	r3, r2, #0
 80013ba:	d000      	beq.n	80013be <HAL_GPIO_Init+0x2be>
 80013bc:	e6a8      	b.n	8001110 <HAL_GPIO_Init+0x10>
  } 
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b006      	add	sp, #24
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000
 80013d0:	48000400 	.word	0x48000400
 80013d4:	48000800 	.word	0x48000800
 80013d8:	48000c00 	.word	0x48000c00
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	0008      	movs	r0, r1
 80013ea:	0011      	movs	r1, r2
 80013ec:	1cbb      	adds	r3, r7, #2
 80013ee:	1c02      	adds	r2, r0, #0
 80013f0:	801a      	strh	r2, [r3, #0]
 80013f2:	1c7b      	adds	r3, r7, #1
 80013f4:	1c0a      	adds	r2, r1, #0
 80013f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f8:	1c7b      	adds	r3, r7, #1
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001400:	1cbb      	adds	r3, r7, #2
 8001402:	881a      	ldrh	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140a:	1cbb      	adds	r3, r7, #2
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e301      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2201      	movs	r2, #1
 8001434:	4013      	ands	r3, r2
 8001436:	d100      	bne.n	800143a <HAL_RCC_OscConfig+0x1e>
 8001438:	e08d      	b.n	8001556 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800143a:	4bc3      	ldr	r3, [pc, #780]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	220c      	movs	r2, #12
 8001440:	4013      	ands	r3, r2
 8001442:	2b04      	cmp	r3, #4
 8001444:	d00e      	beq.n	8001464 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001446:	4bc0      	ldr	r3, [pc, #768]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	220c      	movs	r2, #12
 800144c:	4013      	ands	r3, r2
 800144e:	2b08      	cmp	r3, #8
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x64>
 8001452:	4bbd      	ldr	r3, [pc, #756]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	025b      	lsls	r3, r3, #9
 800145a:	401a      	ands	r2, r3
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	025b      	lsls	r3, r3, #9
 8001460:	429a      	cmp	r2, r3
 8001462:	d10d      	bne.n	8001480 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	4bb8      	ldr	r3, [pc, #736]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	029b      	lsls	r3, r3, #10
 800146c:	4013      	ands	r3, r2
 800146e:	d100      	bne.n	8001472 <HAL_RCC_OscConfig+0x56>
 8001470:	e070      	b.n	8001554 <HAL_RCC_OscConfig+0x138>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <HAL_RCC_OscConfig+0x60>
 800147a:	e06b      	b.n	8001554 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e2d8      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d107      	bne.n	8001498 <HAL_RCC_OscConfig+0x7c>
 8001488:	4baf      	ldr	r3, [pc, #700]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4bae      	ldr	r3, [pc, #696]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	0249      	lsls	r1, r1, #9
 8001492:	430a      	orrs	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e02f      	b.n	80014f8 <HAL_RCC_OscConfig+0xdc>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10c      	bne.n	80014ba <HAL_RCC_OscConfig+0x9e>
 80014a0:	4ba9      	ldr	r3, [pc, #676]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4ba8      	ldr	r3, [pc, #672]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80014a6:	49a9      	ldr	r1, [pc, #676]	; (800174c <HAL_RCC_OscConfig+0x330>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	4ba6      	ldr	r3, [pc, #664]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4ba5      	ldr	r3, [pc, #660]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80014b2:	49a7      	ldr	r1, [pc, #668]	; (8001750 <HAL_RCC_OscConfig+0x334>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e01e      	b.n	80014f8 <HAL_RCC_OscConfig+0xdc>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d10e      	bne.n	80014e0 <HAL_RCC_OscConfig+0xc4>
 80014c2:	4ba1      	ldr	r3, [pc, #644]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4ba0      	ldr	r3, [pc, #640]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	02c9      	lsls	r1, r1, #11
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	4b9d      	ldr	r3, [pc, #628]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b9c      	ldr	r3, [pc, #624]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	0249      	lsls	r1, r1, #9
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0xdc>
 80014e0:	4b99      	ldr	r3, [pc, #612]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b98      	ldr	r3, [pc, #608]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	4999      	ldr	r1, [pc, #612]	; (800174c <HAL_RCC_OscConfig+0x330>)
 80014e8:	400a      	ands	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	4b96      	ldr	r3, [pc, #600]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b95      	ldr	r3, [pc, #596]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	4997      	ldr	r1, [pc, #604]	; (8001750 <HAL_RCC_OscConfig+0x334>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d014      	beq.n	800152a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fd1c 	bl	8000f3c <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150a:	f7ff fd17 	bl	8000f3c <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b64      	cmp	r3, #100	; 0x64
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e28a      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151c:	4b8a      	ldr	r3, [pc, #552]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	029b      	lsls	r3, r3, #10
 8001524:	4013      	ands	r3, r2
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0xee>
 8001528:	e015      	b.n	8001556 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fd07 	bl	8000f3c <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fd02 	bl	8000f3c <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e275      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	4b80      	ldr	r3, [pc, #512]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	029b      	lsls	r3, r3, #10
 800154e:	4013      	ands	r3, r2
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x118>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2202      	movs	r2, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d100      	bne.n	8001562 <HAL_RCC_OscConfig+0x146>
 8001560:	e069      	b.n	8001636 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001562:	4b79      	ldr	r3, [pc, #484]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	220c      	movs	r2, #12
 8001568:	4013      	ands	r3, r2
 800156a:	d00b      	beq.n	8001584 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800156c:	4b76      	ldr	r3, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	220c      	movs	r2, #12
 8001572:	4013      	ands	r3, r2
 8001574:	2b08      	cmp	r3, #8
 8001576:	d11c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x196>
 8001578:	4b73      	ldr	r3, [pc, #460]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	025b      	lsls	r3, r3, #9
 8001580:	4013      	ands	r3, r2
 8001582:	d116      	bne.n	80015b2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001584:	4b70      	ldr	r3, [pc, #448]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2202      	movs	r2, #2
 800158a:	4013      	ands	r3, r2
 800158c:	d005      	beq.n	800159a <HAL_RCC_OscConfig+0x17e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d001      	beq.n	800159a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e24b      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	4b6b      	ldr	r3, [pc, #428]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	22f8      	movs	r2, #248	; 0xf8
 80015a0:	4393      	bics	r3, r2
 80015a2:	0019      	movs	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	00da      	lsls	r2, r3, #3
 80015aa:	4b67      	ldr	r3, [pc, #412]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b0:	e041      	b.n	8001636 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d024      	beq.n	8001604 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ba:	4b63      	ldr	r3, [pc, #396]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b62      	ldr	r3, [pc, #392]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80015c0:	2101      	movs	r1, #1
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fcb9 	bl	8000f3c <HAL_GetTick>
 80015ca:	0003      	movs	r3, r0
 80015cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d0:	f7ff fcb4 	bl	8000f3c <HAL_GetTick>
 80015d4:	0002      	movs	r2, r0
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e227      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2202      	movs	r2, #2
 80015e8:	4013      	ands	r3, r2
 80015ea:	d0f1      	beq.n	80015d0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ec:	4b56      	ldr	r3, [pc, #344]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	22f8      	movs	r2, #248	; 0xf8
 80015f2:	4393      	bics	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00da      	lsls	r2, r3, #3
 80015fc:	4b52      	ldr	r3, [pc, #328]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e018      	b.n	8001636 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b4f      	ldr	r3, [pc, #316]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800160a:	2101      	movs	r1, #1
 800160c:	438a      	bics	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fc94 	bl	8000f3c <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fc8f 	bl	8000f3c <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e202      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2202      	movs	r2, #2
 8001632:	4013      	ands	r3, r2
 8001634:	d1f1      	bne.n	800161a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2208      	movs	r2, #8
 800163c:	4013      	ands	r3, r2
 800163e:	d036      	beq.n	80016ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d019      	beq.n	800167c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001648:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800164a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800164c:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800164e:	2101      	movs	r1, #1
 8001650:	430a      	orrs	r2, r1
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001654:	f7ff fc72 	bl	8000f3c <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165e:	f7ff fc6d 	bl	8000f3c <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e1e0      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001670:	4b35      	ldr	r3, [pc, #212]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	2202      	movs	r2, #2
 8001676:	4013      	ands	r3, r2
 8001678:	d0f1      	beq.n	800165e <HAL_RCC_OscConfig+0x242>
 800167a:	e018      	b.n	80016ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800167e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001680:	4b31      	ldr	r3, [pc, #196]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 8001682:	2101      	movs	r1, #1
 8001684:	438a      	bics	r2, r1
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7ff fc58 	bl	8000f3c <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001692:	f7ff fc53 	bl	8000f3c <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e1c6      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	2202      	movs	r2, #2
 80016aa:	4013      	ands	r3, r2
 80016ac:	d1f1      	bne.n	8001692 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2204      	movs	r2, #4
 80016b4:	4013      	ands	r3, r2
 80016b6:	d100      	bne.n	80016ba <HAL_RCC_OscConfig+0x29e>
 80016b8:	e0b4      	b.n	8001824 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	201f      	movs	r0, #31
 80016bc:	183b      	adds	r3, r7, r0
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80016c4:	69da      	ldr	r2, [r3, #28]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	055b      	lsls	r3, r3, #21
 80016ca:	4013      	ands	r3, r2
 80016cc:	d110      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80016d0:	69da      	ldr	r2, [r3, #28]
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	0549      	lsls	r1, r1, #21
 80016d8:	430a      	orrs	r2, r1
 80016da:	61da      	str	r2, [r3, #28]
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 80016de:	69da      	ldr	r2, [r3, #28]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	055b      	lsls	r3, r3, #21
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016ea:	183b      	adds	r3, r7, r0
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	d11a      	bne.n	8001732 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	0049      	lsls	r1, r1, #1
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff fc17 	bl	8000f3c <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001714:	f7ff fc12 	bl	8000f3c <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e185      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4013      	ands	r3, r2
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d10e      	bne.n	8001758 <HAL_RCC_OscConfig+0x33c>
 800173a:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 800173c:	6a1a      	ldr	r2, [r3, #32]
 800173e:	4b02      	ldr	r3, [pc, #8]	; (8001748 <HAL_RCC_OscConfig+0x32c>)
 8001740:	2101      	movs	r1, #1
 8001742:	430a      	orrs	r2, r1
 8001744:	621a      	str	r2, [r3, #32]
 8001746:	e035      	b.n	80017b4 <HAL_RCC_OscConfig+0x398>
 8001748:	40021000 	.word	0x40021000
 800174c:	fffeffff 	.word	0xfffeffff
 8001750:	fffbffff 	.word	0xfffbffff
 8001754:	40007000 	.word	0x40007000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10c      	bne.n	800177a <HAL_RCC_OscConfig+0x35e>
 8001760:	4bb6      	ldr	r3, [pc, #728]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001762:	6a1a      	ldr	r2, [r3, #32]
 8001764:	4bb5      	ldr	r3, [pc, #724]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001766:	2101      	movs	r1, #1
 8001768:	438a      	bics	r2, r1
 800176a:	621a      	str	r2, [r3, #32]
 800176c:	4bb3      	ldr	r3, [pc, #716]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 800176e:	6a1a      	ldr	r2, [r3, #32]
 8001770:	4bb2      	ldr	r3, [pc, #712]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001772:	2104      	movs	r1, #4
 8001774:	438a      	bics	r2, r1
 8001776:	621a      	str	r2, [r3, #32]
 8001778:	e01c      	b.n	80017b4 <HAL_RCC_OscConfig+0x398>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x380>
 8001782:	4bae      	ldr	r3, [pc, #696]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001784:	6a1a      	ldr	r2, [r3, #32]
 8001786:	4bad      	ldr	r3, [pc, #692]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001788:	2104      	movs	r1, #4
 800178a:	430a      	orrs	r2, r1
 800178c:	621a      	str	r2, [r3, #32]
 800178e:	4bab      	ldr	r3, [pc, #684]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001790:	6a1a      	ldr	r2, [r3, #32]
 8001792:	4baa      	ldr	r3, [pc, #680]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001794:	2101      	movs	r1, #1
 8001796:	430a      	orrs	r2, r1
 8001798:	621a      	str	r2, [r3, #32]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0x398>
 800179c:	4ba7      	ldr	r3, [pc, #668]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 800179e:	6a1a      	ldr	r2, [r3, #32]
 80017a0:	4ba6      	ldr	r3, [pc, #664]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	438a      	bics	r2, r1
 80017a6:	621a      	str	r2, [r3, #32]
 80017a8:	4ba4      	ldr	r3, [pc, #656]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80017aa:	6a1a      	ldr	r2, [r3, #32]
 80017ac:	4ba3      	ldr	r3, [pc, #652]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80017ae:	2104      	movs	r1, #4
 80017b0:	438a      	bics	r2, r1
 80017b2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d014      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7ff fbbe 	bl	8000f3c <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c4:	e009      	b.n	80017da <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7ff fbb9 	bl	8000f3c <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	4a9b      	ldr	r2, [pc, #620]	; (8001a40 <HAL_RCC_OscConfig+0x624>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e12b      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017da:	4b98      	ldr	r3, [pc, #608]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x3aa>
 80017e4:	e013      	b.n	800180e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fba9 	bl	8000f3c <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ee:	e009      	b.n	8001804 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7ff fba4 	bl	8000f3c <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	4a91      	ldr	r2, [pc, #580]	; (8001a40 <HAL_RCC_OscConfig+0x624>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e116      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001804:	4b8d      	ldr	r3, [pc, #564]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	2202      	movs	r2, #2
 800180a:	4013      	ands	r3, r2
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800180e:	231f      	movs	r3, #31
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001818:	4b88      	ldr	r3, [pc, #544]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 800181a:	69da      	ldr	r2, [r3, #28]
 800181c:	4b87      	ldr	r3, [pc, #540]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 800181e:	4989      	ldr	r1, [pc, #548]	; (8001a44 <HAL_RCC_OscConfig+0x628>)
 8001820:	400a      	ands	r2, r1
 8001822:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2210      	movs	r2, #16
 800182a:	4013      	ands	r3, r2
 800182c:	d063      	beq.n	80018f6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d12a      	bne.n	800188c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001836:	4b81      	ldr	r3, [pc, #516]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183a:	4b80      	ldr	r3, [pc, #512]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 800183c:	2104      	movs	r1, #4
 800183e:	430a      	orrs	r2, r1
 8001840:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001842:	4b7e      	ldr	r3, [pc, #504]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001846:	4b7d      	ldr	r3, [pc, #500]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001848:	2101      	movs	r1, #1
 800184a:	430a      	orrs	r2, r1
 800184c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff fb75 	bl	8000f3c <HAL_GetTick>
 8001852:	0003      	movs	r3, r0
 8001854:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001858:	f7ff fb70 	bl	8000f3c <HAL_GetTick>
 800185c:	0002      	movs	r2, r0
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e0e3      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800186a:	4b74      	ldr	r3, [pc, #464]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 800186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186e:	2202      	movs	r2, #2
 8001870:	4013      	ands	r3, r2
 8001872:	d0f1      	beq.n	8001858 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001874:	4b71      	ldr	r3, [pc, #452]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001878:	22f8      	movs	r2, #248	; 0xf8
 800187a:	4393      	bics	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	00da      	lsls	r2, r3, #3
 8001884:	4b6d      	ldr	r3, [pc, #436]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001886:	430a      	orrs	r2, r1
 8001888:	635a      	str	r2, [r3, #52]	; 0x34
 800188a:	e034      	b.n	80018f6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	3305      	adds	r3, #5
 8001892:	d111      	bne.n	80018b8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001894:	4b69      	ldr	r3, [pc, #420]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001898:	4b68      	ldr	r3, [pc, #416]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 800189a:	2104      	movs	r1, #4
 800189c:	438a      	bics	r2, r1
 800189e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018a0:	4b66      	ldr	r3, [pc, #408]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80018a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a4:	22f8      	movs	r2, #248	; 0xf8
 80018a6:	4393      	bics	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	00da      	lsls	r2, r3, #3
 80018b0:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80018b2:	430a      	orrs	r2, r1
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
 80018b6:	e01e      	b.n	80018f6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018b8:	4b60      	ldr	r3, [pc, #384]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80018ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018bc:	4b5f      	ldr	r3, [pc, #380]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80018be:	2104      	movs	r1, #4
 80018c0:	430a      	orrs	r2, r1
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018c4:	4b5d      	ldr	r3, [pc, #372]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80018c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c8:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80018ca:	2101      	movs	r1, #1
 80018cc:	438a      	bics	r2, r1
 80018ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7ff fb34 	bl	8000f3c <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018da:	f7ff fb2f 	bl	8000f3c <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0a2      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018ec:	4b53      	ldr	r3, [pc, #332]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	2202      	movs	r2, #2
 80018f2:	4013      	ands	r3, r2
 80018f4:	d1f1      	bne.n	80018da <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d100      	bne.n	8001900 <HAL_RCC_OscConfig+0x4e4>
 80018fe:	e097      	b.n	8001a30 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001900:	4b4e      	ldr	r3, [pc, #312]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	220c      	movs	r2, #12
 8001906:	4013      	ands	r3, r2
 8001908:	2b08      	cmp	r3, #8
 800190a:	d100      	bne.n	800190e <HAL_RCC_OscConfig+0x4f2>
 800190c:	e06b      	b.n	80019e6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d14c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001916:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 800191c:	494a      	ldr	r1, [pc, #296]	; (8001a48 <HAL_RCC_OscConfig+0x62c>)
 800191e:	400a      	ands	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff fb0b 	bl	8000f3c <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff fb06 	bl	8000f3c <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e079      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193e:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	049b      	lsls	r3, r3, #18
 8001946:	4013      	ands	r3, r2
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194a:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	220f      	movs	r2, #15
 8001950:	4393      	bics	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001958:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 800195a:	430a      	orrs	r2, r1
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
 800195e:	4b37      	ldr	r3, [pc, #220]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4a3a      	ldr	r2, [pc, #232]	; (8001a4c <HAL_RCC_OscConfig+0x630>)
 8001964:	4013      	ands	r3, r2
 8001966:	0019      	movs	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	431a      	orrs	r2, r3
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	0449      	lsls	r1, r1, #17
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff fad9 	bl	8000f3c <HAL_GetTick>
 800198a:	0003      	movs	r3, r0
 800198c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff fad4 	bl	8000f3c <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e047      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	049b      	lsls	r3, r3, #18
 80019aa:	4013      	ands	r3, r2
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x574>
 80019ae:	e03f      	b.n	8001a30 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80019b6:	4924      	ldr	r1, [pc, #144]	; (8001a48 <HAL_RCC_OscConfig+0x62c>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fabe 	bl	8000f3c <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff fab9 	bl	8000f3c <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e02c      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	049b      	lsls	r3, r3, #18
 80019e0:	4013      	ands	r3, r2
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x5aa>
 80019e4:	e024      	b.n	8001a30 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e01f      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80019f8:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	025b      	lsls	r3, r3, #9
 8001a04:	401a      	ands	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d10e      	bne.n	8001a2c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	220f      	movs	r2, #15
 8001a12:	401a      	ands	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	23f0      	movs	r3, #240	; 0xf0
 8001a20:	039b      	lsls	r3, r3, #14
 8001a22:	401a      	ands	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b008      	add	sp, #32
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	00001388 	.word	0x00001388
 8001a44:	efffffff 	.word	0xefffffff
 8001a48:	feffffff 	.word	0xfeffffff
 8001a4c:	ffc2ffff 	.word	0xffc2ffff

08001a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0b3      	b.n	8001bcc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <HAL_RCC_ClockConfig+0x184>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d911      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b58      	ldr	r3, [pc, #352]	; (8001bd4 <HAL_RCC_ClockConfig+0x184>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4393      	bics	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	4b55      	ldr	r3, [pc, #340]	; (8001bd4 <HAL_RCC_ClockConfig+0x184>)
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a84:	4b53      	ldr	r3, [pc, #332]	; (8001bd4 <HAL_RCC_ClockConfig+0x184>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e09a      	b.n	8001bcc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d015      	beq.n	8001acc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d006      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001ab0:	21e0      	movs	r1, #224	; 0xe0
 8001ab2:	00c9      	lsls	r1, r1, #3
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab8:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	22f0      	movs	r2, #240	; 0xf0
 8001abe:	4393      	bics	r3, r2
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d040      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	029b      	lsls	r3, r3, #10
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d114      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e06e      	b.n	8001bcc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	049b      	lsls	r3, r3, #18
 8001afe:	4013      	ands	r3, r2
 8001b00:	d108      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e062      	b.n	8001bcc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e05b      	b.n	8001bcc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	4393      	bics	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001b24:	430a      	orrs	r2, r1
 8001b26:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b28:	f7ff fa08 	bl	8000f3c <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f7ff fa03 	bl	8000f3c <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	4a27      	ldr	r2, [pc, #156]	; (8001bdc <HAL_RCC_ClockConfig+0x18c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e042      	b.n	8001bcc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1ec      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_RCC_ClockConfig+0x184>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4013      	ands	r3, r2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d211      	bcs.n	8001b8a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCC_ClockConfig+0x184>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_RCC_ClockConfig+0x184>)
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_RCC_ClockConfig+0x184>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4013      	ands	r3, r2
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e020      	b.n	8001bcc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	4013      	ands	r3, r2
 8001b92:	d009      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <HAL_RCC_ClockConfig+0x190>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ba8:	f000 f820 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001bac:	0001      	movs	r1, r0
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_RCC_ClockConfig+0x188>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <HAL_RCC_ClockConfig+0x194>)
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	000a      	movs	r2, r1
 8001bbe:	40da      	lsrs	r2, r3
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_RCC_ClockConfig+0x198>)
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff f973 	bl	8000eb0 <HAL_InitTick>
  
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b004      	add	sp, #16
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40022000 	.word	0x40022000
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	00001388 	.word	0x00001388
 8001be0:	fffff8ff 	.word	0xfffff8ff
 8001be4:	08003204 	.word	0x08003204
 8001be8:	20000008 	.word	0x20000008

08001bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	220c      	movs	r2, #12
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x30>
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x36>
 8001c1a:	e02c      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c1e:	613b      	str	r3, [r7, #16]
      break;
 8001c20:	e02c      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	0c9b      	lsrs	r3, r3, #18
 8001c26:	220f      	movs	r2, #15
 8001c28:	4013      	ands	r3, r2
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c2c:	5cd3      	ldrb	r3, [r2, r3]
 8001c2e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	220f      	movs	r2, #15
 8001c36:	4013      	ands	r3, r2
 8001c38:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	025b      	lsls	r3, r3, #9
 8001c44:	4013      	ands	r3, r2
 8001c46:	d009      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	4810      	ldr	r0, [pc, #64]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c4c:	f7fe fa5c 	bl	8000108 <__udivsi3>
 8001c50:	0003      	movs	r3, r0
 8001c52:	001a      	movs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4353      	muls	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e009      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	000a      	movs	r2, r1
 8001c60:	0152      	lsls	r2, r2, #5
 8001c62:	1a52      	subs	r2, r2, r1
 8001c64:	0193      	lsls	r3, r2, #6
 8001c66:	1a9b      	subs	r3, r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	185b      	adds	r3, r3, r1
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	613b      	str	r3, [r7, #16]
      break;
 8001c74:	e002      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c78:	613b      	str	r3, [r7, #16]
      break;
 8001c7a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c7c:	693b      	ldr	r3, [r7, #16]
}
 8001c7e:	0018      	movs	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b006      	add	sp, #24
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	007a1200 	.word	0x007a1200
 8001c90:	08003214 	.word	0x08003214
 8001c94:	08003224 	.word	0x08003224

08001c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0a8      	b.n	8001dfc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	2382      	movs	r3, #130	; 0x82
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d009      	beq.n	8001cd2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	61da      	str	r2, [r3, #28]
 8001cc4:	e005      	b.n	8001cd2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	225d      	movs	r2, #93	; 0x5d
 8001cdc:	5c9b      	ldrb	r3, [r3, r2]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d107      	bne.n	8001cf4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	225c      	movs	r2, #92	; 0x5c
 8001ce8:	2100      	movs	r1, #0
 8001cea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff f838 	bl	8000d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	225d      	movs	r2, #93	; 0x5d
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2140      	movs	r1, #64	; 0x40
 8001d08:	438a      	bics	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	23e0      	movs	r3, #224	; 0xe0
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d902      	bls.n	8001d1e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	e002      	b.n	8001d24 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	015b      	lsls	r3, r3, #5
 8001d22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	23f0      	movs	r3, #240	; 0xf0
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d008      	beq.n	8001d42 <HAL_SPI_Init+0xaa>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	23e0      	movs	r3, #224	; 0xe0
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d002      	beq.n	8001d42 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	2382      	movs	r3, #130	; 0x82
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6899      	ldr	r1, [r3, #8]
 8001d50:	2384      	movs	r3, #132	; 0x84
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	400b      	ands	r3, r1
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	400b      	ands	r3, r1
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	2101      	movs	r1, #1
 8001d68:	400b      	ands	r3, r1
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6999      	ldr	r1, [r3, #24]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	400b      	ands	r3, r1
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	2138      	movs	r1, #56	; 0x38
 8001d7e:	400b      	ands	r3, r1
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	2180      	movs	r1, #128	; 0x80
 8001d88:	400b      	ands	r3, r1
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	0011      	movs	r1, r2
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	019b      	lsls	r3, r3, #6
 8001d96:	401a      	ands	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	2204      	movs	r2, #4
 8001da8:	401a      	ands	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2110      	movs	r1, #16
 8001db0:	400b      	ands	r3, r1
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	2108      	movs	r1, #8
 8001dba:	400b      	ands	r3, r1
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68d9      	ldr	r1, [r3, #12]
 8001dc2:	23f0      	movs	r3, #240	; 0xf0
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	0011      	movs	r1, r2
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	015b      	lsls	r3, r3, #5
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4907      	ldr	r1, [pc, #28]	; (8001e04 <HAL_SPI_Init+0x16c>)
 8001de8:	400a      	ands	r2, r1
 8001dea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	225d      	movs	r2, #93	; 0x5d
 8001df6:	2101      	movs	r1, #1
 8001df8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b004      	add	sp, #16
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	fffff7ff 	.word	0xfffff7ff

08001e08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	1dbb      	adds	r3, r7, #6
 8001e16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e18:	231f      	movs	r3, #31
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	225c      	movs	r2, #92	; 0x5c
 8001e24:	5c9b      	ldrb	r3, [r3, r2]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_SPI_Transmit+0x26>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e147      	b.n	80020be <HAL_SPI_Transmit+0x2b6>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	225c      	movs	r2, #92	; 0x5c
 8001e32:	2101      	movs	r1, #1
 8001e34:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e36:	f7ff f881 	bl	8000f3c <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001e3e:	2316      	movs	r3, #22
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	1dba      	adds	r2, r7, #6
 8001e44:	8812      	ldrh	r2, [r2, #0]
 8001e46:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	225d      	movs	r2, #93	; 0x5d
 8001e4c:	5c9b      	ldrb	r3, [r3, r2]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d004      	beq.n	8001e5e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001e54:	231f      	movs	r3, #31
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	2202      	movs	r2, #2
 8001e5a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e5c:	e128      	b.n	80020b0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_SPI_Transmit+0x64>
 8001e64:	1dbb      	adds	r3, r7, #6
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d104      	bne.n	8001e76 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001e6c:	231f      	movs	r3, #31
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e74:	e11c      	b.n	80020b0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	225d      	movs	r2, #93	; 0x5d
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1dba      	adds	r2, r7, #6
 8001e8e:	8812      	ldrh	r2, [r2, #0]
 8001e90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1dba      	adds	r2, r7, #6
 8001e96:	8812      	ldrh	r2, [r2, #0]
 8001e98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2244      	movs	r2, #68	; 0x44
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2246      	movs	r2, #70	; 0x46
 8001eac:	2100      	movs	r1, #0
 8001eae:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d110      	bne.n	8001eea <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2140      	movs	r1, #64	; 0x40
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	01c9      	lsls	r1, r1, #7
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2240      	movs	r2, #64	; 0x40
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d007      	beq.n	8001f08 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2140      	movs	r1, #64	; 0x40
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	23e0      	movs	r3, #224	; 0xe0
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d952      	bls.n	8001fba <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <HAL_SPI_Transmit+0x11e>
 8001f1c:	2316      	movs	r3, #22
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d143      	bne.n	8001fae <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	881a      	ldrh	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	1c9a      	adds	r2, r3, #2
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f4a:	e030      	b.n	8001fae <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2202      	movs	r2, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d112      	bne.n	8001f80 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	1c9a      	adds	r2, r3, #2
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f7e:	e016      	b.n	8001fae <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f80:	f7fe ffdc 	bl	8000f3c <HAL_GetTick>
 8001f84:	0002      	movs	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d802      	bhi.n	8001f96 <HAL_SPI_Transmit+0x18e>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	d102      	bne.n	8001f9c <HAL_SPI_Transmit+0x194>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d108      	bne.n	8001fae <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001f9c:	231f      	movs	r3, #31
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	225d      	movs	r2, #93	; 0x5d
 8001fa8:	2101      	movs	r1, #1
 8001faa:	5499      	strb	r1, [r3, r2]
          goto error;
 8001fac:	e080      	b.n	80020b0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1c9      	bne.n	8001f4c <HAL_SPI_Transmit+0x144>
 8001fb8:	e053      	b.n	8002062 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d004      	beq.n	8001fcc <HAL_SPI_Transmit+0x1c4>
 8001fc2:	2316      	movs	r3, #22
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d145      	bne.n	8002058 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	330c      	adds	r3, #12
 8001fd6:	7812      	ldrb	r2, [r2, #0]
 8001fd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001ff2:	e031      	b.n	8002058 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d113      	bne.n	800202a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	330c      	adds	r3, #12
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002028:	e016      	b.n	8002058 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800202a:	f7fe ff87 	bl	8000f3c <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d802      	bhi.n	8002040 <HAL_SPI_Transmit+0x238>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	d102      	bne.n	8002046 <HAL_SPI_Transmit+0x23e>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d108      	bne.n	8002058 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002046:	231f      	movs	r3, #31
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	2203      	movs	r2, #3
 800204c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	225d      	movs	r2, #93	; 0x5d
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]
          goto error;
 8002056:	e02b      	b.n	80020b0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1c8      	bne.n	8001ff4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	6839      	ldr	r1, [r7, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	0018      	movs	r0, r3
 800206a:	f000 f95d 	bl	8002328 <SPI_EndRxTxTransaction>
 800206e:	1e03      	subs	r3, r0, #0
 8002070:	d002      	beq.n	8002078 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2220      	movs	r2, #32
 8002076:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800209e:	231f      	movs	r3, #31
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	e003      	b.n	80020b0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	225d      	movs	r2, #93	; 0x5d
 80020ac:	2101      	movs	r1, #1
 80020ae:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	225c      	movs	r2, #92	; 0x5c
 80020b4:	2100      	movs	r1, #0
 80020b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80020b8:	231f      	movs	r3, #31
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	781b      	ldrb	r3, [r3, #0]
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b008      	add	sp, #32
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020d8:	f7fe ff30 	bl	8000f3c <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	18d3      	adds	r3, r2, r3
 80020e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020e8:	f7fe ff28 	bl	8000f3c <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020f0:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	015b      	lsls	r3, r3, #5
 80020f6:	0d1b      	lsrs	r3, r3, #20
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	4353      	muls	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020fe:	e058      	b.n	80021b2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	d055      	beq.n	80021b2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002106:	f7fe ff19 	bl	8000f3c <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	429a      	cmp	r2, r3
 8002114:	d902      	bls.n	800211c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d142      	bne.n	80021a2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	21e0      	movs	r1, #224	; 0xe0
 8002128:	438a      	bics	r2, r1
 800212a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	2382      	movs	r3, #130	; 0x82
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	429a      	cmp	r2, r3
 8002136:	d113      	bne.n	8002160 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	429a      	cmp	r2, r3
 8002142:	d005      	beq.n	8002150 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	429a      	cmp	r2, r3
 800214e:	d107      	bne.n	8002160 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2140      	movs	r1, #64	; 0x40
 800215c:	438a      	bics	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	019b      	lsls	r3, r3, #6
 8002168:	429a      	cmp	r2, r3
 800216a:	d110      	bne.n	800218e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	491a      	ldr	r1, [pc, #104]	; (80021e0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2180      	movs	r1, #128	; 0x80
 8002188:	0189      	lsls	r1, r1, #6
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	225d      	movs	r2, #93	; 0x5d
 8002192:	2101      	movs	r1, #1
 8002194:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	225c      	movs	r2, #92	; 0x5c
 800219a:	2100      	movs	r1, #0
 800219c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e017      	b.n	80021d2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	4013      	ands	r3, r2
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	425a      	negs	r2, r3
 80021c2:	4153      	adcs	r3, r2
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	001a      	movs	r2, r3
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d197      	bne.n	8002100 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b008      	add	sp, #32
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	20000008 	.word	0x20000008
 80021e0:	ffffdfff 	.word	0xffffdfff

080021e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80021f2:	2317      	movs	r3, #23
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80021fa:	f7fe fe9f 	bl	8000f3c <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	18d3      	adds	r3, r2, r3
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800220a:	f7fe fe97 	bl	8000f3c <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	330c      	adds	r3, #12
 8002218:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	0013      	movs	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	189b      	adds	r3, r3, r2
 8002224:	00da      	lsls	r2, r3, #3
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	0d1b      	lsrs	r3, r3, #20
 800222a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222c:	4353      	muls	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002230:	e068      	b.n	8002304 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	23c0      	movs	r3, #192	; 0xc0
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	429a      	cmp	r2, r3
 800223a:	d10a      	bne.n	8002252 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	2117      	movs	r1, #23
 800224a:	187b      	adds	r3, r7, r1
 800224c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800224e:	187b      	adds	r3, r7, r1
 8002250:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	d055      	beq.n	8002304 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002258:	f7fe fe70 	bl	8000f3c <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	429a      	cmp	r2, r3
 8002266:	d902      	bls.n	800226e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	2b00      	cmp	r3, #0
 800226c:	d142      	bne.n	80022f4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	21e0      	movs	r1, #224	; 0xe0
 800227a:	438a      	bics	r2, r1
 800227c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	2382      	movs	r3, #130	; 0x82
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	429a      	cmp	r2, r3
 8002288:	d113      	bne.n	80022b2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	429a      	cmp	r2, r3
 8002294:	d005      	beq.n	80022a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	429a      	cmp	r2, r3
 80022a0:	d107      	bne.n	80022b2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2140      	movs	r1, #64	; 0x40
 80022ae:	438a      	bics	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	019b      	lsls	r3, r3, #6
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d110      	bne.n	80022e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4916      	ldr	r1, [pc, #88]	; (8002324 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80022ca:	400a      	ands	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	0189      	lsls	r1, r1, #6
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	225d      	movs	r2, #93	; 0x5d
 80022e4:	2101      	movs	r1, #1
 80022e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	225c      	movs	r2, #92	; 0x5c
 80022ec:	2100      	movs	r1, #0
 80022ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e010      	b.n	8002316 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	3b01      	subs	r3, #1
 8002302:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4013      	ands	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	d18e      	bne.n	8002232 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b00a      	add	sp, #40	; 0x28
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	20000008 	.word	0x20000008
 8002324:	ffffdfff 	.word	0xffffdfff

08002328 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	23c0      	movs	r3, #192	; 0xc0
 8002338:	0159      	lsls	r1, r3, #5
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	0013      	movs	r3, r2
 8002342:	2200      	movs	r2, #0
 8002344:	f7ff ff4e 	bl	80021e4 <SPI_WaitFifoStateUntilTimeout>
 8002348:	1e03      	subs	r3, r0, #0
 800234a:	d007      	beq.n	800235c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002350:	2220      	movs	r2, #32
 8002352:	431a      	orrs	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e027      	b.n	80023ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	0013      	movs	r3, r2
 8002366:	2200      	movs	r2, #0
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	f7ff fead 	bl	80020c8 <SPI_WaitFlagStateUntilTimeout>
 800236e:	1e03      	subs	r3, r0, #0
 8002370:	d007      	beq.n	8002382 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	2220      	movs	r2, #32
 8002378:	431a      	orrs	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e014      	b.n	80023ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	23c0      	movs	r3, #192	; 0xc0
 8002386:	00d9      	lsls	r1, r3, #3
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	0013      	movs	r3, r2
 8002390:	2200      	movs	r2, #0
 8002392:	f7ff ff27 	bl	80021e4 <SPI_WaitFifoStateUntilTimeout>
 8002396:	1e03      	subs	r3, r0, #0
 8002398:	d007      	beq.n	80023aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	2220      	movs	r2, #32
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e000      	b.n	80023ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b004      	add	sp, #16
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <__libc_init_array>:
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	2600      	movs	r6, #0
 80023b8:	4d0c      	ldr	r5, [pc, #48]	; (80023ec <__libc_init_array+0x38>)
 80023ba:	4c0d      	ldr	r4, [pc, #52]	; (80023f0 <__libc_init_array+0x3c>)
 80023bc:	1b64      	subs	r4, r4, r5
 80023be:	10a4      	asrs	r4, r4, #2
 80023c0:	42a6      	cmp	r6, r4
 80023c2:	d109      	bne.n	80023d8 <__libc_init_array+0x24>
 80023c4:	2600      	movs	r6, #0
 80023c6:	f000 f821 	bl	800240c <_init>
 80023ca:	4d0a      	ldr	r5, [pc, #40]	; (80023f4 <__libc_init_array+0x40>)
 80023cc:	4c0a      	ldr	r4, [pc, #40]	; (80023f8 <__libc_init_array+0x44>)
 80023ce:	1b64      	subs	r4, r4, r5
 80023d0:	10a4      	asrs	r4, r4, #2
 80023d2:	42a6      	cmp	r6, r4
 80023d4:	d105      	bne.n	80023e2 <__libc_init_array+0x2e>
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	00b3      	lsls	r3, r6, #2
 80023da:	58eb      	ldr	r3, [r5, r3]
 80023dc:	4798      	blx	r3
 80023de:	3601      	adds	r6, #1
 80023e0:	e7ee      	b.n	80023c0 <__libc_init_array+0xc>
 80023e2:	00b3      	lsls	r3, r6, #2
 80023e4:	58eb      	ldr	r3, [r5, r3]
 80023e6:	4798      	blx	r3
 80023e8:	3601      	adds	r6, #1
 80023ea:	e7f2      	b.n	80023d2 <__libc_init_array+0x1e>
 80023ec:	08003234 	.word	0x08003234
 80023f0:	08003234 	.word	0x08003234
 80023f4:	08003234 	.word	0x08003234
 80023f8:	08003238 	.word	0x08003238

080023fc <memset>:
 80023fc:	0003      	movs	r3, r0
 80023fe:	1882      	adds	r2, r0, r2
 8002400:	4293      	cmp	r3, r2
 8002402:	d100      	bne.n	8002406 <memset+0xa>
 8002404:	4770      	bx	lr
 8002406:	7019      	strb	r1, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	e7f9      	b.n	8002400 <memset+0x4>

0800240c <_init>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr

08002418 <_fini>:
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241e:	bc08      	pop	{r3}
 8002420:	469e      	mov	lr, r3
 8002422:	4770      	bx	lr
